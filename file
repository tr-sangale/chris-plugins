def is_running_in_container():
    """Return True if the current process is running inside a container be it wither docker , containered, podman etc."""
    container_runtimes = ['docker', 'containerd', 'podman', 'crio', 'app']
    try:
        with open('/proc/1/cgroup', 'r') as f:
            for line in f:
                for runtime in container_runtimes:
                    if runtime in line:
                        return True
    except FileNotFoundError:
        pass
    return False
    
    
    
    
    
    -------------------------------------------------
    
    
    
    
    import os

def is_running_in_container():
    """
    Returns True if the process is running inside a container, False otherwise.
    """
    # Check if /proc/1/cgroup exists and contains "docker", "containerd", "podman", "crio", or "apptainer"
    if os.path.exists('/proc/1/cgroup'):
        with open('/proc/1/cgroup', 'rt') as f:
            cgroup = f.read()
            return any(runtime in cgroup for runtime in ('docker', 'containerd', 'podman', 'crio', 'apptainer'))
    # If /proc/1/cgroup doesn't exist, assume not in a container
    return False








------------------------------------------------------------
tests for the #1 code



import unittest
from unittest.mock import mock_open, patch
from is_running_in_container import is_running_in_container

class TestIsRunningInContainer(unittest.TestCase):

    def test_container_detection(self):
        # Test detection when running inside a container (Docker)
        with patch('builtins.open', mock_open(read_data='11:hugetlb:/docker/123abc\n')):
            self.assertTrue(is_running_in_container())

        # Test detection when running inside a container (Podman)
        with patch('builtins.open', mock_open(read_data='11:hugetlb:/podman/123abc\n')):
            self.assertTrue(is_running_in_container())

        # Test detection when running inside a container (CRI-O)
        with patch('builtins.open', mock_open(read_data='11:hugetlb:/crio/123abc\n')):
            self.assertTrue(is_running_in_container())

        # Test detection when running inside a container (Containerd)
        with patch('builtins.open', mock_open(read_data='11:hugetlb:/system.slice/containerd.service\n')):
            self.assertTrue(is_running_in_container())

        # Test detection when running inside a container (App Container)
        with patch('builtins.open', mock_open(read_data='11:hugetlb:/appc/123abc\n')):
            self.assertTrue(is_running_in_container())

        # Test detection when not running inside a container
        with patch('builtins.open', mock_open(read_data='11:hugetlb:/\n')):
            self.assertFalse(is_running_in_container())

if __name__ == '__main__':
    unittest.main()

